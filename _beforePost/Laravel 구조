.env - 글로벌 설정 중 민감한 값, 내가 운영할 서버에 고정적인 값 
    app
        Console - 우리가 만든 콘솔 명령을 담은 디렉토라 
            Kernal.php - 콘솔명령 크론작업을 하는 디렉토리 
        
        Exception - 우리가 만든 예외 클래스를 담는 디렉토리 
            Handler.php - 전역 예외 규칙을 정의한 클래스 
        
        Http - Http 요청을 처리하는 클래스를 담은 디렉토리 
            Controllers - Http 요청을 처리하는 컨트롤러를 담은 디렉토리
                Auth - 라라벨에 내장된 사용자 인증 컨트롤러 
            Kernal.php - Http 요청을 처리를 위해 기본이 되는 커널 
            Middleware - 미들웨어를 담는 디렉토리 
        
        Provider - 서비스 프로바이더(Service Provider )를 담은 디렉토리 (기본적으로 있어야 하는 서비스들을  담은 클래스 이것만 있어도 근데 다 할 수 있는거 같다 )
            AppServiceProvider.php - 우리가 만든 서비스들을 컨데이너에 등록하는 클래스 
            AuthServiceProvider.php - 사용자 인가와 관련된 정책을 등록하기 위한 클래스 
            BroadcastServiceProvider.php - Broadcast 메시지 전송으루 등록하기 위한 클래스 
            EventServiceProvider.php - 이벤트와 이벤트 처리기를 연결하는 클래스 
            RouteServiceProvider.php - routes 디렉토리에서 정의힌 리우팅을 활성화하는 클래스 
    User.php - 기본 내장으로 제공된 User 모델 

boostrap - 프래임워크 부팅 스크립트 
composer.json
composer.lock
config - 데이터베이스  , 큐 , 메일 등 전역 설정을 담는 디렉토리 
database
    factories - 더미 모델을 위한 레시피를 담는 디렉토리  
        (더미 데이터가 공간을 예비해두기 위해서 필요한 것)
    migrations - 이 프로젝트의 데이터베이스 테이블 스키마를 담는 디렉토리 
    seeds - 생성한 데이터에 더미 데이터를 삽입하는 디렉토리 

gulpfile.js - 엘릭서(elixir , 프론트엔드 빌드 자동화 레지스터리)
package.json 
프론트엔드 reSouce 레지스토리 
phpunit.xml - phpUnit 테스트 프레임워크 설정 
public - 여기가 웹 서버 루트
resource 
    assets - 엘릭서 빌드전의 원본 자바스크립트 
    lang - 다국어 지원을 위한 언어별 사전을 담는 디렉토리 
    views - 뷰 파일ㅇ르 담는 디렉토리 
routes - 라우트 정의 테이블을 담는 디렉토리 
    api.php - api 엔드 포인트 
    console.php - 
    web.php - 웹 엔드 포인트 
server.php - 로컬 웹 서버 구동을 위한 api 
storage
tests
vendor - 이 프로젝트가 의존하는 php 컴포넌트를 담은 디렉토리 



1. 애플리케이션(도메인) layer - 우리가 직접 개발한 애플리케이션 레이어  
2. 라라벨 프레임워크 
3. 라라벨 핵심 컴포넌트
4. 외부 컴포넌트 
composer.json 패키지를 설치할 때 3번과 4번을 요구 
2번과 3번을 나누어 놓은 이유는 우리가 작성한 코드와 분리시키기 위해서 3번은 분리시켜놓고 2번 위에서 작업을 한다. 


라라벨 작동원리 
1. 사용자가 브라우저에 URL이 담긴 페이지 요청
2. 사용자의 요청이 서버에 도착 
3, 웹 서버는 URL 해석하고 자신이 해결할 수 있는지를 판단하고 해결할 수 없다면 index.php를 가도록 가리킨다. (캐시 여부인듯)
4. index.php에는 다음과 같은 부팅 시퀸스가 담겨져있다. (처리하는 순서)
    4-1. 라라벨은 routes/web.php에 정의한 라우팅 테이블에서 about을 찾는다.(라우팅)
    4-2. 일치하는 라우터가 없다면 웹 서버가 오류를 반환한다. (404 NOT FOUND) 
    4-3. 일치하는 라우터가 있다면 전역 미들웨어와 about 라우터에 정의한 라우트 미들웨어가 HTTP 요청을 필터링한다. (미들웨어)
    4-4. 미들웨어를 통과하지 못한다면 예외가 발생하낟. 전역 예외 처리기는 웹 서버에게 적절한 HTTP 응답을 반환한다. 
    4-5. 미들웨어를 통과했다면 요청을 처리할 컨트롤러에게 작업이 도달한다. (컨트롤러)
    4-6. 컨트롤러는 HTTP 요청을 처리한다. 이때 라라벨 컴포넌트, 외부 컴포넌트의 기능, 우리가 만든 기능 등을 이용한다. 
    4-7. 컨트롤러는 요청을 처리하는 과정에 데이터베이스와 통신을 하기도 한다.(*엘로퀀트)
    4-8. 컨트롤러는 웹 서버에게 돌려줄 HTTP 응답 본문을 만들 때 *템플릿 엔진을 사용하기도 한다.(*블레이드)

5. 웹 서버는 PHP/라라벨 측으로부터 받은 HTTP 응답을 브라우저에게 돌려준다. 

*템플릿 엔진: 서버에서 만든 데이터와 합쳐서 결과 문서를 만들때 사용하는 소프트웨어 
*엘로퀀트: 데이터베이스는 테이블간의 관계를 가지고있고 이러한 관게를 맺어주는 것(일대일, 일대다, 다대다 관계 )
*블레이드: 블레이드는 라라벨에서 제공하는 간단하지만 강력한 템플릿 엔진
